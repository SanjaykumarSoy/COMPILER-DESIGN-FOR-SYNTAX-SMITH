1.1.	Write a LEX program to accept string starting with vowel(vowel_lexer.l)


%{
#include <stdio.h>
#include <stdlib.h>
%}

%option noyywrap

VOWEL [AaEeIiOoUu]
CONSONANT [BbCcDdFfGgHhJjKkLlMmNnPpQqRrSsTtVvWwXxYyZz]
OTHER [^a-zA-Z]

%%

^{VOWEL}[a-zA-Z]*    { printf("Valid string (starts with vowel): %s\n", yytext); }
^{CONSONANT}[a-zA-Z]* { printf("Invalid string (starts with consonant): %s\n", yytext); }
^{OTHER}.*            { printf("Invalid string (doesn't start with letter): %s\n", yytext); }
\n                    { /* Ignore newlines */ }
.                     { /* Ignore other characters */ }

%%

int main() {
    yylex();
    return 0;
}

2.2.	School management wants to validate DOB of all students. Write a LEX program to implement it(dob_lexer.l)

%{
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int validate_date(int day, int month, int year);
int is_leap_year(int year);
%}

%option noyywrap

DAY     0[1-9]|[12][0-9]|3[01]
MONTH   0[1-9]|1[0-2]
YEAR    (19|20)[0-9]{2}
SEP     [-/.]

%%

^{DAY}{SEP}{MONTH}{SEP}{YEAR}$ {
    int day, month, year;
    sscanf(yytext, "%d%*[-/.]%d%*[-/.]%d", &day, &month, &year);
    
    if (validate_date(day, month, year)) {
        printf("Valid DOB: %s\n", yytext);
    } else {
        printf("Invalid DOB (invalid date): %s\n", yytext);
    }
}

.+\n    { printf("Invalid DOB format (use DD-MM-YYYY): %s", yytext); }
\n       { /* Ignore empty lines */ }

%%

int validate_date(int day, int month, int year) {
    time_t now = time(NULL);
    struct tm *current = localtime(&now);
    int current_year = current->tm_year + 1900;
    
    // Basic year validation (1900-current year)
    if (year < 1900 || year > current_year) {
        return 0;
    }
    
    // Month validation
    if (month < 1 || month > 12) {
        return 0;
    }
    
    // Day validation
    if (day < 1) {
        return 0;
    }
    
    // Check maximum days per month
    int max_days;
    switch (month) {
        case 2: // February
            max_days = is_leap_year(year) ? 29 : 28;
            break;
        case 4: case 6: case 9: case 11: // April, June, September, November
            max_days = 30;
            break;
        default:
            max_days = 31;
    }
    
    if (day > max_days) {
        return 0;
    }
    
    // Additional check for future dates
    if (year == current_year) {
        int current_month = current->tm_mon + 1;
        if (month > current_month) {
            return 0;
        }
        if (month == current_month && day > current->tm_mday) {
            return 0;
        }
    }
    
    return 1;
}

int is_leap_year(int year) {
    if (year % 4 != 0) return 0;
    if (year % 100 != 0) return 1;
    return (year % 400 == 0);
}

int main() {
    printf("Enter student DOB in DD-MM-YYYY format (Ctrl+D to exit):\n");
    yylex();
    return 0;
}


3.	Write a LEX program to count the number of comment lines in a given C program and eliminate them and write into another file.(comment_remover.l)
Input Source File: (input.c)
#include<stdio.h> 
int main()
{
int a,b,c; /*varible declaration*/ printf(“enter two numbers”); scanf(“%d %d”,&a,&b); c=a+b;//adding two numbers printf(“sum is %d”,c);
return 0;
}


%{
#include <stdio.h>
#include <stdlib.h>

int comment_line_count = 0;
int in_multi_line_comment = 0;
FILE *output_file;

void write_to_output(const char *text);
%}

%option noyywrap

SINGLE_LINE_COMMENT "//".*
MULTI_LINE_COMMENT_START "/*"
MULTI_LINE_COMMENT_END "*/"
NEWLINE \n

%%

{SINGLE_LINE_COMMENT} {
    comment_line_count++;
    /* Don't write to output - this eliminates the comment */
}

{MULTI_LINE_COMMENT_START} {
    in_multi_line_comment = 1;
    comment_line_count++;
    /* Don't write to output */
}

{MULTI_LINE_COMMENT_END} {
    in_multi_line_comment = 0;
    /* Don't write to output */
}

{NEWLINE} {
    if (in_multi_line_comment) {
        comment_line_count++;
    }
    write_to_output(yytext);
}

. {
    if (!in_multi_line_comment) {
        write_to_output(yytext);
    }
}

%%

void write_to_output(const char *text) {
    if (output_file) {
        fputs(text, output_file);
    }
}

int main(int argc, char **argv) {
    if (argc < 3) {
        fprintf(stderr, "Usage: %s <input_file> <output_file>\n", argv[0]);
        return 1;
    }

    yyin = fopen(argv[1], "r");
    if (!yyin) {
        perror("Error opening input file");
        return 1;
    }

    output_file = fopen(argv[2], "w");
    if (!output_file) {
        perror("Error opening output file");
        fclose(yyin);
        return 1;
    }

    yylex();

    printf("Total comment lines removed: %d\n", comment_line_count);

    fclose(yyin);
    fclose(output_file);

    return 0;
}

4.4.	Implement a C program to eliminate left recursion.
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_PROD 10
#define MAX_LEN 50

void eliminateLeftRecursion(char productions[MAX_PROD][MAX_LEN], int num_productions);

int main() {
    char productions[MAX_PROD][MAX_LEN];
    int num_productions;

    printf("Enter number of productions: ");
    scanf("%d", &num_productions);
    getchar(); // Consume newline

    printf("Enter productions (format: A->Aα|β):\n");
    for(int i = 0; i < num_productions; i++) {
        fgets(productions[i], MAX_LEN, stdin);
        productions[i][strcspn(productions[i], "\n")] = '\0'; // Remove newline
    }

    eliminateLeftRecursion(productions, num_productions);

    return 0;
}

void eliminateLeftRecursion(char productions[MAX_PROD][MAX_LEN], int num_productions) {
    for(int i = 0; i < num_productions; i++) {
        char non_terminal = productions[i][0];
        char *rhs = productions[i] + 3; // Skip "A->"
        char alpha[MAX_PROD][MAX_LEN] = {0};
        char beta[MAX_PROD][MAX_LEN] = {0};
        int alpha_count = 0, beta_count = 0;
        char *token = strtok(rhs, "|");

        // Separate α and β productions
        while(token != NULL) {
            if(token[0] == non_terminal) {
                strcpy(alpha[alpha_count++], token + 1); // Skip the non-terminal
            } else {
                strcpy(beta[beta_count++], token);
            }
            token = strtok(NULL, "|");
        }

        // If left recursion exists
        if(alpha_count > 0) {
            printf("\nAfter eliminating left recursion for %c:\n", non_terminal);
            
            // Original non-terminal productions (A -> βA')
            printf("%c->", non_terminal);
            for(int j = 0; j < beta_count; j++) {
                printf("%s%c'", beta[j], non_terminal);
                if(j < beta_count - 1) printf("|");
            }
            printf("\n");
            
            // New non-terminal productions (A' -> αA' | ε)
            printf("%c'->", non_terminal);
            for(int j = 0; j < alpha_count; j++) {
                printf("%s%c'", alpha[j], non_terminal);
                if(j < alpha_count - 1) printf("|");
            }
            printf("|ε\n");
        } else {
            printf("\nNo left recursion in production: %s\n", productions[i]);
        }
    }
}
